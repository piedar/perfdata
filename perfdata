#!/usr/bin/env python3
# SPDX-License-Identifier: AGPL-3.0-only

import contextlib
from contextlib import contextmanager
import os
from pathlib import Path
import shutil
import signal
import subprocess as sub
import sys
import time

SCRIPT_DIR = Path(__file__).resolve().parent

def debug(*args):
	print(*args, file=sys.stderr)

def _raise(ex): raise ex

def _pass(*a, **k): pass

def is_truthy(val):
	return val and val.casefold() == 'true'.casefold() or val == '1'

def csv(values):
	return str.join(',', (str(v) for v in values))

signals_overriden=[]
def signal_append(sig, handler_next):
	handler_prev = signal.getsignal(sig)
	# default SIGINT (and possibly other) handler is indistinguishable from user handler
	if sig not in signals_overriden:
		signals_overriden.append(sig)
		handler_prev = None
	def handler(signum, frame):
		if callable(handler_prev):
			handler_prev(signum, frame)
		handler_next(signum, frame)
	signal.signal(sig, handler)

def signal_append_all(sigs, handler_next):
	for sig in sigs:
		signal_append(sig, handler_next)

def get_profile_dir_default(name):
	XDG_CACHE_HOME = Path(os.environ.get('XDG_CACHE_HOME') or Path(os.environ['HOME']) / '.cache')
	return XDG_CACHE_HOME / 'perfdata' / name

def get_profile_dir(name):
	return Path(os.environ.get('PERFDATA_PROFILE_DIR') or get_profile_dir_default(name))


# todo: cleanup

# perf notes
	# todo: does --event=branches gather enough data?
	# in this example - https://groups.google.com/g/llvm-dev/c/-Ao1uXCi8QM
	# they filter on --event=br_inst_retired.near_taken which doesn't produce anything useful for me

	# --call-graph=fp requires the source to be built with '-fno-omit-frame-pointer'
	# if llvm-profgen gains support in the future we could use '--call-graph=dwarf'

	# --freq=max gathers more events but adds significant cpu overhead when including call-graph
	# todo: maybe if perf-script and llvm-profgen were more optimized...


PERF_BRANCH_FILTER = '--branch-filter=any,u'
PERF_RECORD_PARAMS = [
	PERF_BRANCH_FILTER,
	'--mmap-flush=128K',
	'--call-graph=fp',
	'--event=branches:uP',
	#'--freq=max',
]

perf_exe = shutil.which('perf')

@contextmanager
def attach_prof(pids, output_path, binaries):
	prof_output = Path(f"{output_path}.prof")
	prof_output_part = Path(f"{prof_output}.part")
	prof_output.parent.mkdir(parents=True, exist_ok=True)

	perf2prof_exe = SCRIPT_DIR / 'perf2prof'

	# perf output pipes straight to perf2prof
	perf_proc = sub.Popen([
			perf_exe, 'record', *PERF_RECORD_PARAMS, '--output=-',
				'--pid', csv(pids),
		],
		stdout=sub.PIPE, stderr=sys.stderr,
	)
	try:
		binary_args = [b for b in binaries for b in ['--binary', str(b)]]
		perf2prof_proc = sub.Popen([ str(perf2prof_exe), '-', *binary_args, '--output', str(prof_output_part) ],
			# using a separate session to prevent the shell sending SIGINT directly to the worker
			start_new_session=True,
			stdin=perf_proc.stdout, stdout=sys.stderr, stderr=sys.stderr,
		)
		perf_proc.stdout.close() # perf2prof now owns this pipe - perf should get SIGPIPE if it closes early

		try:
			yield perf_proc
		finally:
			try:
				perf2prof_proc.communicate()
				if perf2prof_proc.returncode == 0:
					prof_output_part.rename(prof_output)
					debug(f"finished {prof_output}")
				else:
					debug('perf2prof failed - stop recording')
			finally:
				perf_proc.terminate()

	except:
		perf_proc.terminate()
		raise


@contextmanager
def start_command_proc(command, exe_path):
	# this is the main user process - it gets priority on stdin and stdout
	command_proc = sub.Popen([ str(exe_path), *command[1:] ],
		stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr,
	)
	try:
		def handler(signum, frame):
			signame = signal.strsignal(signum)
			debug(f"shutting down on {signame}")
			command_proc.terminate()
		signal_append_all([signal.SIGINT, signal.SIGTERM, signal.SIGQUIT], handler)
		yield command_proc
	except:
		command_proc.terminate()
		raise
	else:
		command_proc.communicate()


@contextmanager
def attach_perfdata(pids, output_path):
	output_path.mkdir(parents=True, exist_ok=True)

	# compression uses extra cpu time - much more at higher levels
	# compression levels >= 10 cause lost samples on my system
	# compression has diminishing returns after about level 8

	# todo: might rely on EXE_CACHE instead of buildid

	# with --switch-output there are 1 or more files named like ${PERFDATA_OUTPUT}.{timestamp}
	# --switch-output cannot be read by perf-script when compressed?

	flock_exe = shutil.which('flock')

	perf_proc = sub.Popen([
		flock_exe, '--exclusive', '--timeout', '10', '--no-fork', str(output_path),
			perf_exe, 'record', *PERF_RECORD_PARAMS,
				'--switch-output=1G', '--no-no-buildid',
				'--output', str(output_path / 'perfdata'),
				'--pid', csv(pids),
		],
		stdout=sys.stderr, stderr=sys.stderr,
	)

	try:
		yield perf_proc
	finally:
		perf_proc.communicate()
		# os.chmod() is not recursive - use system chmod instead
		chmod_exe = shutil.which('chmod')
		sub.call([ chmod_exe, '--recursive', 'ug+rX', str(output_path) ])

def setup_output_path(exe_path, pids):
	# todo: necessary?
	os.umask(0o0027)

	def stamp_default():
		import hashlib
		try:
			with open(exe_path, 'rb') as f:
				return hashlib.file_digest(f, 'sha256').hexdigest()
		except FileNotFoundError:
			pass
		return hashlib.sha256(str(exe_path).encode()).hexdigest()


	PERFDATA_STAMP = os.environ.get('PERFDATA_STAMP') or stamp_default()
	PERFDATA_ID = f"{PERFDATA_STAMP}-{round(time.time())}-{csv(pids)}"
	profile_dir = get_profile_dir(exe_path.name)
	return profile_dir / f"{PERFDATA_ID}.perfdata"


def main_collect(args):
	assert(args.format == 'perfdata' or args.format == 'prof')

	command = args.command[1:] if args.command[0] == '--' else args.command
	exe_path = Path(shutil.which(command[0]) or Path(command[0]).resolve()).absolute()
	exe_path.is_file() or _raise(Exception(f"{exe_path} not found (is it a shell builtin?)"))

	with start_command_proc(command, exe_path) as command_proc:
		def attach():
			pids = {command_proc.pid}
			output_path = setup_output_path(exe_path, pids)
			if args.format == 'perfdata':
				return attach_perfdata(pids, output_path)
			elif args.format == 'prof':
				return attach_prof(pids, output_path, args.binary or [exe_path])

		with attach() as attached_proc:
			debug(f"attached to {command_proc.pid}")

		command_proc.communicate()
		return command_proc.returncode


def get_matching_pids(is_match, on_error=None):
	proc = Path('/proc')
	for p in proc.iterdir():
		try:
			if p.is_dir() and is_match(p):
				yield int(p.name)
		except Exception as error:
			(on_error or _pass)(error)

def extract_exe_path(p, on_error=None):
	try:
		p_exe = (p / 'exe').resolve()
		if p_exe.exists(): return p_exe
	except Exception as error:
		(on_error or _pass)(error)
	cmdline = (p / 'cmdline').read_text().split('\x00')
	return Path(cmdline[0])

def get_exe_path(pid):
	return extract_exe_path(Path('/proc', str(pid)), on_error=debug)


def main_attach(args):
	assert(args.format == 'perfdata' or args.format == 'prof')

	def attach(pid):
		exe_path = get_exe_path(pid)
		output_path = setup_output_path(exe_path, {pid})
		if args.format == 'perfdata':
			return attach_perfdata({pid}, output_path)
		elif args.format == 'prof':
			binaries = args.binary or ([exe_path] if exe_path and exe_path.exists() else _raise(Exception(f"{exe_path} not found")))
			return attach_prof({pid}, output_path, binaries)

	# usually these errors are permission denied for other users' processes
	# log each one once to notify the caller without spamming messages
	extract_errors = set()
	def on_extract_error(ex):
		ex_string = str(ex)
		if not ex_string in extract_errors:
			extract_errors.add(ex_string)
			debug(ex)
		raise ex

	attached_pids  = set()
	attached_procs = []
	finished_procs = []

	from threading import Event

	done_waiting = Event()
	def handler(signum, frame):
		signame = signal.strsignal(signum)
		debug(f"ending wait on {signame}")
		done_waiting.set()
	signal_append_all([signal.SIGINT, signal.SIGTERM, signal.SIGQUIT], handler)

	with contextlib.ExitStack() as stack:
		try:
			while not done_waiting.is_set():
				all_pids = (
					{args.pid} if args.pid
					else get_matching_pids(lambda p: extract_exe_path(p, on_error=on_extract_error).samefile(Path(args.path).absolute())) if args.path
					else get_matching_pids(lambda p: extract_exe_path(p, on_error=on_extract_error).name == args.name)  if args.name
					else _raise(Exception('must specify one of --pid --path or --name'))
				)

				# it is possible to attach to multiple processes
				# but perf-record acts kinda weird in this situation
				# so attach a separate profiler for each process
				new_pids = (p for p in all_pids if p not in attached_pids)
				for pid in new_pids:
					attached_proc = stack.enter_context(attach(pid))
					attached_procs.append(attached_proc)
					attached_pids |= {pid}
					debug(f"attached {attached_proc.pid} to {pid}")

				wait_seconds = 1 if args.wait else None
				for attached_proc in attached_procs:
					try:
						attached_proc.communicate(timeout = wait_seconds / len(attached_procs))
					except sub.TimeoutExpired: pass
					else:
						attached_procs.remove(attached_proc)
						finished_procs.append(attached_proc)
						debug(f"exited {attached_proc.pid}")
				else:
					time.sleep(wait_seconds)

				if not args.wait: break
		finally:
			for attached_proc in attached_procs:
				debug(f"terminating {attached_proc.pid}")
				attached_proc.terminate()
				attached_proc.communicate()
				finished_procs.append(attached_proc)

	return finished_procs


if __name__ == '__main__':
	import argparse

	cli = argparse.ArgumentParser(allow_abbrev=False)

	cli.add_argument('--format', choices=['perfdata', 'prof'],  default='prof')
	cli.add_argument('--binary', action='append')

	attach_group = cli.add_argument_group('attach')
	attach_group.add_argument('--wait', action='store_true')
	pgroup = attach_group.add_mutually_exclusive_group()
	pgroup.add_argument('--pid', type=int)
	pgroup.add_argument('--path', type=Path)
	pgroup.add_argument('--name')

	cli.add_argument('command', nargs=argparse.REMAINDER)

	args = cli.parse_args()

	if args.pid or args.path or args.name:
		assert(not args.command)
		main_attach(args)
	elif args.command:
		assert(not args.pid and not args.path and not args.name)
		main_collect(args)
	else:
		cli.print_help()
