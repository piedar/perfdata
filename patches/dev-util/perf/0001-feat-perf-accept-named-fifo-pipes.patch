From 478f92a8cef74fdb18a55c34baa7731469aa05c9 Mon Sep 17 00:00:00 2001
From: Benn Snyder <benn.snyder@gmail.com>
Date: Fri, 26 Jan 2024 00:13:51 -0500
Subject: [PATCH] feat(perf): accept named fifo pipes

---
 util/data.c | 114 ++++++++++++++++++++++++++++++----------------------
 1 file changed, 67 insertions(+), 47 deletions(-)

diff --git a/util/data.c b/util/data.c
index fc16299..e11e19f 100644
--- a/util/data.c
+++ b/util/data.c
@@ -166,38 +166,26 @@ int perf_data__update_dir(struct perf_data *data)
 	return 0;
 }
 
-static bool check_pipe(struct perf_data *data)
+static bool fis_fifo(int fd)
 {
 	struct stat st;
-	bool is_pipe = false;
-	int fd = perf_data__is_read(data) ?
-		 STDIN_FILENO : STDOUT_FILENO;
-
-	if (!data->path) {
-		if (!fstat(fd, &st) && S_ISFIFO(st.st_mode))
-			is_pipe = true;
-	} else {
-		if (!strcmp(data->path, "-"))
-			is_pipe = true;
-	}
-
-	if (is_pipe) {
-		if (data->use_stdio) {
-			const char *mode;
+	return 0 == fstat(fd, &st) && S_ISFIFO(st.st_mode);
+}
 
-			mode = perf_data__is_read(data) ? "r" : "w";
-			data->file.fptr = fdopen(fd, mode);
+static bool is_fifo(const char *restrict path) {
+	struct stat st;
+	return 0 == stat(path, &st) && S_ISFIFO(st.st_mode);
+}
 
-			if (data->file.fptr == NULL) {
-				data->file.fd = fd;
-				data->use_stdio = false;
-			}
-		} else {
-			data->file.fd = fd;
+static void apply_io(struct perf_data *data, const int fd, const char *mode)
+{
+	if (data->is_pipe && data->use_stdio) {
+		data->file.fptr = fdopen(fd, mode);
+		if ((data->use_stdio = data->file.fptr != NULL)) {
+			return;
 		}
 	}
-
-	return data->is_pipe = is_pipe;
+	data->file.fd = fd;
 }
 
 static int check_backup(struct perf_data *data)
@@ -272,14 +260,18 @@ static int open_file_read(struct perf_data *data)
 		goto out_close;
 	}
 
-	if (!st.st_size) {
-		pr_info("zero-sized data (%s), nothing to do!\n",
-			data->file.path);
-		goto out_close;
+	data->is_pipe = S_ISFIFO(st.st_mode);
+	apply_io(data, fd, "r");
+	if (!data->is_pipe) {
+		if (!st.st_size) {
+			pr_info("zero-sized data (%s), nothing to do!\n",
+				data->file.path);
+			goto out_close;
+		}
+		data->file.size = st.st_size;
 	}
 
-	data->file.size = st.st_size;
-	return fd;
+	return 0;
 
  out_close:
 	close(fd);
@@ -294,27 +286,29 @@ static int open_file_write(struct perf_data *data)
 	fd = open(data->file.path, O_CREAT|O_RDWR|O_TRUNC|O_CLOEXEC,
 		  S_IRUSR|S_IWUSR);
 
-	if (fd < 0)
+	if (fd < 0) {
+		int err = errno;
 		pr_err("failed to open %s : %s\n", data->file.path,
-			str_error_r(errno, sbuf, sizeof(sbuf)));
+			str_error_r(err, sbuf, sizeof(sbuf)));
+		return -err;
+	}
+
+	data->is_pipe = fis_fifo(fd);
+	apply_io(data, fd, "w");
 
-	return fd;
+	return 0;
 }
 
 static int open_file(struct perf_data *data)
 {
-	int fd;
-
-	fd = perf_data__is_read(data) ?
+	int ret = perf_data__is_read(data) ?
 	     open_file_read(data) : open_file_write(data);
 
-	if (fd < 0) {
+	if (ret < 0) {
 		zfree(&data->file.path);
-		return -1;
 	}
 
-	data->file.fd = fd;
-	return 0;
+	return ret;
 }
 
 static int open_file_dup(struct perf_data *data)
@@ -350,17 +344,43 @@ static int open_dir(struct perf_data *data)
 	return ret;
 }
 
+static bool try_open_pipe(struct perf_data *data, const char *path_default)
+{
+	int fd_stdio = perf_data__is_read(data) ?
+		STDIN_FILENO : STDOUT_FILENO;
+
+	data->is_pipe = false;
+
+	if ((data->path && 0 == strcmp(data->path, "-")) ||
+		(!data->path && fis_fifo(fd_stdio)))
+	{
+		data->is_pipe = true;
+		apply_io(data, fd_stdio, perf_data__is_read(data) ? "r" : "w");
+		return true;
+	}
+
+	if (!data->path)
+		data->path = path_default;
+
+	if (data->path) {
+		if ((data->is_pipe = is_fifo(data->path))) {
+			int ret = open_file_dup(data);
+			if (ret < 0) return false; // error opening - already logged
+		}
+	}
+
+	return data->is_pipe;
+}
+
 int perf_data__open(struct perf_data *data)
 {
-	if (check_pipe(data))
+	if (try_open_pipe(data, "perf.data"))
 		return 0;
 
 	/* currently it allows stdio for pipe only */
+	/* todo: maybe this restriction can be lifted after testing all commands with pipes and --stdio */
 	data->use_stdio = false;
 
-	if (!data->path)
-		data->path = "perf.data";
-
 	if (check_backup(data))
 		return -1;
 
@@ -418,7 +438,7 @@ int perf_data__switch(struct perf_data *data,
 {
 	int ret;
 
-	if (check_pipe(data))
+	if (try_open_pipe(data, NULL))
 		return -EINVAL;
 	if (perf_data__is_read(data))
 		return -EINVAL;
-- 
2.43.0

